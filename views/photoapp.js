// Generated by CoffeeScript 1.6.3
(function() {
  var BigImageView, DescriptionView, Property, Thumb, ThumbView, Ticker, TickerView, app, bigimg, description, prop, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Thumb = (function(_super) {
    __extends(Thumb, _super);

    function Thumb() {
      _ref = Thumb.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Thumb.prototype.defaults = {
      src: "",
      title: "",
      alt: ""
    };

    Thumb.prototype.initialize = function() {
      return this.set("original_src", this.original_size());
    };

    Thumb.prototype.original_size = function() {
      var current_src;
      current_src = this.get("src");
      return current_src.replace(/(.)\.jpg/, "o.jpg");
    };

    return Thumb;

  })(Backbone.Model);

  ThumbView = (function(_super) {
    __extends(ThumbView, _super);

    function ThumbView() {
      _ref1 = ThumbView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ThumbView.prototype.tagName = "img";

    ThumbView.prototype.className = "ui image";

    ThumbView.prototype.events = {
      'click': 'clicked'
    };

    ThumbView.prototype.render = function() {
      this.$el.attr('src', this.model.get('src'));
      this.$el.attr('title', this.model.get('title'));
      this.$el.attr('alt', this.model.get('alt'));
      return this;
    };

    ThumbView.prototype.clicked = function(event) {
      return Backbone.trigger("show:image", this.model);
    };

    return ThumbView;

  })(Backbone.View);

  Ticker = (function(_super) {
    __extends(Ticker, _super);

    function Ticker() {
      _ref2 = Ticker.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Ticker.prototype.model = Thumb;

    return Ticker;

  })(Backbone.Collection);

  TickerView = (function(_super) {
    __extends(TickerView, _super);

    function TickerView() {
      _ref3 = TickerView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    TickerView.prototype.el = "#ticker";

    TickerView.prototype.initialize = function() {
      this.collection = new Ticker();
      return this;
    };

    TickerView.prototype.render = function() {
      return this.collection.each(function(item) {
        return this.renderThumb(item);
      }, this);
    };

    TickerView.prototype.renderThumb = function(item) {
      var thumbView;
      thumbView = new ThumbView({
        model: item
      });
      this.$el.append(thumbView.render().el);
      return this;
    };

    return TickerView;

  })(Backbone.View);

  BigImageView = (function(_super) {
    __extends(BigImageView, _super);

    function BigImageView() {
      _ref4 = BigImageView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    BigImageView.prototype.el = '#bigimage';

    BigImageView.prototype.initialize = function() {
      return Backbone.on("show:image", this.changeImage, this);
    };

    BigImageView.prototype.changeImage = function(model) {
      this.$el.attr('src', model.get('original_src'));
      if (model.get("title").length > 0) {
        this.$el.attr('title', model.get("title"));
      } else {
        this.$el.attr('title', '&nbsp;');
      }
      if (model.get("alt").length > 0) {
        return this.$el.attr('alt', model.get("alt"));
      } else {
        return this.$el.attr('alt', '&nbsp;');
      }
    };

    BigImageView.prototype.render = function() {
      return this.changeImage(app.collection[0]);
    };

    return BigImageView;

  })(Backbone.View);

  DescriptionView = (function(_super) {
    __extends(DescriptionView, _super);

    function DescriptionView() {
      _ref5 = DescriptionView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    DescriptionView.prototype.el = '#description';

    DescriptionView.prototype.initialize = function() {
      return Backbone.on("show:image", this.changeDescription, this);
    };

    DescriptionView.prototype.changeDescription = function(model) {
      return this.$el.text(model.get('title'));
    };

    DescriptionView.prototype.render = function() {
      return this.changeDescription(app.collection.at(0));
    };

    return DescriptionView;

  })(Backbone.View);

  Property = (function(_super) {
    __extends(Property, _super);

    function Property() {
      _ref6 = Property.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Property.prototype.defaults = {
      property_id: 0,
      photos: []
    };

    Property.prototype.urlRoot = "/api/property";

    Property.prototype.fillTicker = function(prop, app) {
      _.each(prop.get("photos"), function(item) {
        return app.collection.add(new Thumb({
          src: item.href,
          title: item.description,
          alt: item.description
        }));
      });
      app.render();
      Backbone.trigger("show:image", app.collection.at(0));
      return app;
    };

    return Property;

  })(Backbone.Model);

  app = new TickerView;

  bigimg = new BigImageView;

  description = new DescriptionView;

  prop = new Property({
    id: 17
  });

  prop.fetch({
    success: function() {
      return prop.fillTicker(prop, app);
    }
  });

}).call(this);
